    def execute_command(cmd):
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
        output, error = process.communicate()
        if error:
            print(f"Error executing command: {cmd}")
        return output.decode('utf-8')
    ```
    def get_updated_files_in_submodule(commit1, commit2):
        cmd = f"git submodule foreach --recursive 'git diff --name-only {commit1} {commit2}'"
        output = execute_command(cmd)
        files = output.split('\n')
        return [file for file in files if file]  # exclude empty strings
    ```
from git import Repo

# Access the repository
repo = Repo('path/to/your/repo')

# Select the submodule
submodule = repo.submodules[0]

# Access the submodule's repository
submodule_repo = submodule.module()

# Get the list of changed files
changed_files = [item.a_path for item in submodule_repo.index.diff(None)]

# Print the list of changed files
for file in changed_files:
    print(file)
from git import Repo

repo = Repo('/path/to/repository')
submodule = repo.submodule('submodule_name')
commit = submodule.module().head.commit
diff = commit.diff(repo.index)
file_names = [d.a_path for d in diff]

print(file_names)





from git import Repo

repo_path = '/path/to/repository'
repo = Repo(repo_path)

# Get the list of submodules
submodules = repo.submodules

# Iterate over each submodule
for submodule in submodules:
    submodule_repo = submodule.module()

    # Get the diff between the submodule's index and working tree
    diff = submodule_repo.index.diff(submodule_repo.head.commit)

    # Iterate over the diff objects
    for d in diff:
        # Get the file name that has been updated
        file_name = d.a_path
        print(file_name)

